<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Recovery</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .input-focus:focus {
            box-shadow: 0 0 0 3px rgba(118, 75, 162, 0.25);
        }
        .shake {
            animation: shake 0.5s;
        }
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }
        .transition-all {
            transition: all 0.3s ease-out;
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">
    <div class="max-w-md w-full bg-white rounded-xl shadow-2xl overflow-hidden transition-all transform hover:scale-[1.005]">
        <!-- Header Section -->
        <div class="gradient-bg py-8 px-6">
            <div class="flex justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                </svg>
            </div>
            <h1 class="text-2xl font-bold text-center text-white">Reset Your Password</h1>
            <p class="text-center text-white opacity-90 mt-2">Enter your email to receive a reset link</p>
        </div>

        <!-- Main Content -->
        <div class="p-8">
            <div id="emailStep" class="">
                <form id="emailForm" class="space-y-6">
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                    <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                                </svg>
                            </div>
                            <input type="email" id="email" name="email" required 
                                class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none input-focus"
                                placeholder="your@email.com">
                        </div>
                        <p id="emailError" class="mt-1 text-sm text-red-600 hidden">Please enter a valid email address</p>
                    </div>

                    <button type="submit" id="submitEmail" class="w-full gradient-bg text-white py-3 px-4 rounded-md font-medium hover:opacity-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                        Send Reset Link
                        <span id="spinner" class="ml-2 hidden">
                            <svg class="animate-spin h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                </form>

                <div class="mt-6 text-center">
                    <a href="/login" class="text-sm font-medium text-indigo-600 hover:text-indigo-500">Back to login</a>
                </div>
            </div>

            <!-- Verification Step (Hidden Initially) -->
            <div id="verificationStep" class="hidden">
                <div class="text-center">
                    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                        <svg class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                    <h2 class="mt-3 text-lg font-medium text-gray-900">Check Your Email</h2>
                    <p class="mt-2 text-sm text-gray-500">
                        We've sent a 6-digit verification code to <span id="emailDisplay" class="font-medium text-gray-800"></span>
                    </p>
                    <p class="mt-1 text-sm text-gray-500">
                        Please enter it below to verify your account.
                    </p>

                    <form id="verificationForm" class="mt-6">
                        <div class="flex justify-center space-x-3">
                            <input type="text" maxlength="1" pattern="[0-9]" 
                                class="w-12 h-12 text-center text-xl border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                            <input type="text" maxlength="1" pattern="[0-9]" 
                                class="w-12 h-12 text-center text-xl border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                            <input type="text" maxlength="1" pattern="[0-9]" 
                                class="w-12 h-12 text-center text-xl border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                            <input type="text" maxlength="1" pattern="[0-9]" 
                                class="w-12 h-12 text-center text-xl border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                            <input type="text" maxlength="1" pattern="[0-9]" 
                                class="w-12 h-12 text-center text-xl border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                            <input type="text" maxlength="1" pattern="[0-9]" 
                                class="w-12 h-12 text-center text-xl border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                        </div>
                        <p id="codeError" class="mt-2 text-sm text-red-600 hidden">Invalid verification code</p>
                        
                        <button type="submit" id="verifyCode" class="mt-6 w-full gradient-bg text-white py-3 px-4 rounded-md font-medium hover:opacity-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Verify Code
                        </button>
                    </form>

                    <div class="mt-4 text-center">
                        <p class="text-sm text-gray-500">
                            Didn't receive a code? <button id="resendCode" class="font-medium text-indigo-600 hover:text-indigo-500">Resend code</button>
                        </p>
                    </div>
                </div>
            </div>

            <!-- New Password Step (Hidden Initially) -->
            <div id="passwordStep" class="hidden space-y-6">
                <div class="text-center">
                    <h2 class="text-xl font-bold text-gray-900">Create New Password</h2>
                    <p class="text-sm text-gray-500 mt-2">
                        Your new password must be different from your previously used passwords
                    </p>
                </div>

                <form id="passwordForm">
                    <div class="space-y-4">
                        <div>
                            <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                            <div class="relative">
                                <input type="password" id="newPassword" name="newPassword" required minlength="8"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none input-focus"
                                    placeholder="••••••••">
                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer" onclick="togglePasswordVisibility('newPassword')">
                                    <svg id="newPasswordEye" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                </div>
                            </div>
                            <p id="passwordError" class="mt-1 text-sm text-red-600 hidden">Password must be at least 8 characters</p>
                            <div id="passwordStrength" class="mt-2">
                                <div class="h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                                    <div id="strengthBar" class="h-full bg-red-400 rounded-full" style="width: 0%"></div>
                                </div>
                                <p id="strengthText" class="text-xs mt-1 text-gray-500">Password strength: <span>very weak</span></p>
                            </div>
                        </div>

                        <div>
                            <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                            <div class="relative">
                                <input type="password" id="confirmPassword" name="confirmPassword" required minlength="8"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none input-focus"
                                    placeholder="••••••••">
                                <div class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer" onclick="togglePasswordVisibility('confirmPassword')">
                                    <svg id="confirmPasswordEye" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                </div>
                            </div>
                            <p id="confirmError" class="mt-1 text-sm text-red-600 hidden">Passwords don't match</p>
                        </div>
                    </div>

                    <button type="submit" id="resetPassword" class="mt-6 w-full gradient-bg text-white py-3 px-4 rounded-md font-medium hover:opacity-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Reset Password
                    </button>
                </form>
            </div>

            <!-- Success Message (Hidden Initially) -->
            <div id="successStep" class="hidden text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                    <svg class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
                <h2 class="mt-3 text-lg font-medium text-gray-900">Password Changed!</h2>
                <p class="mt-2 text-sm text-gray-500">
                    Your password has been successfully updated.
                </p>
                <div class="mt-6">
                    <a href="/login" class="w-full gradient-bg text-white py-3 px-4 rounded-md font-medium hover:opacity-95 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 inline-block">
                        Return to Login
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const emailForm = document.getElementById('emailForm');
        const emailInput = document.getElementById('email');
        const emailError = document.getElementById('emailError');
        const submitEmail = document.getElementById('submitEmail');
        const spinner = document.getElementById('spinner');
        
        const emailStep = document.getElementById('emailStep');
        const verificationStep = document.getElementById('verificationStep');
        const passwordStep = document.getElementById('passwordStep');
        const successStep = document.getElementById('successStep');
        
        const emailDisplay = document.getElementById('emailDisplay');
        const verificationForm = document.getElementById('verificationForm');
        const codeInputs = verificationForm.querySelectorAll('input[type="text"]');
        const codeError = document.getElementById('codeError');
        const resendCode = document.getElementById('resendCode');
        
        const passwordForm = document.getElementById('passwordForm');
        const newPassword = document.getElementById('newPassword');
        const confirmPassword = document.getElementById('confirmPassword');
        const passwordError = document.getElementById('passwordError');
        const confirmError = document.getElementById('confirmError');
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        // Form Navigation
        let currentStep = 'email';
        
        // Initialize OTP inputs
        codeInputs.forEach((input, index) => {
            // Handle input
            input.addEventListener('input', (e) => {
                if (e.target.value.length === 1) {
                    if (index < codeInputs.length - 1) {
                        codeInputs[index + 1].focus();
                    }
                }
                
                // Auto submit when last digit is entered
                if (e.target.value.length === 1 && index === codeInputs.length - 1) {
                    verificationForm.requestSubmit();
                }
            });
            
            // Handle backspace
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && e.target.value.length === 0 && index > 0) {
                    codeInputs[index - 1].focus();
                }
            });
            
            // Handle paste
            input.addEventListener('paste', (e) => {
                e.preventDefault();
                const pasteData = e.clipboardData.getData('text');
                if (/^[0-9]{6}$/.test(pasteData)) {
                    for (let i = 0; i < 6; i++) {
                        codeInputs[i].value = pasteData[i];
                    }
                    verificationForm.requestSubmit();
                }
            });
        });
        
        // Validate email format
        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }
        
        // Check password strength
        function checkPasswordStrength(password) {
            let strength = 0;
            
            // Length check
            if (password.length >= 8) strength += 1;
            if (password.length >= 12) strength += 1;
            
            // Character type checks
            if (/[A-Z]/.test(password)) strength += 1; // Uppercase
            if (/[a-z]/.test(password)) strength += 1; // Lowercase
            if (/[0-9]/.test(password)) strength += 1; // Numbers
            if (/[^A-Za-z0-9]/.test(password)) strength += 1; // Special chars
            
            return strength;
        }
        
        // Update password strength meter
        function updatePasswordStrength(password) {
            const strength = checkPasswordStrength(password);
            const strengthLevels = ['very weak', 'weak', 'medium', 'strong', 'very strong', 'excellent'];
            const colors = ['bg-red-400', 'bg-orange-400', 'bg-yellow-400', 'bg-blue-400', 'bg-green-400', 'bg-green-500'];
            
            const width = Math.min(100, strength * 20);
            strengthBar.style.width = `${width}%`;
            strengthBar.className = `h-full ${colors[strength]} rounded-full transition-all duration-300`;
            
            const span = strengthText.querySelector('span');
            span.textContent = strengthLevels[strength];
            span.className = `text-${colors[strength].split('-')[1]}-600 font-medium`;
        }
        
        // Toggle password visibility
        function togglePasswordVisibility(id) {
            const input = document.getElementById(id);
            const eyeIcon = document.getElementById(`${id}Eye`);
            
            if (input.type === 'password') {
                input.type = 'text';
                eyeIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l-3.29-3.29" />';
            } else {
                input.type = 'password';
                eyeIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />';
            }
        }
        
        // Email form submission
        emailForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = emailInput.value.trim();
            
            if (!validateEmail(email)) {
                emailInput.classList.add('border-red-500', 'shake');
                emailError.classList.remove('hidden');
                setTimeout(() => {
                    emailInput.classList.remove('shake');
                }, 500);
                return;
            }
            
            // Show loading spinner
            submitEmail.disabled = true;
            spinner.classList.remove('hidden');
            
            // Simulate API call
            try {
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // On success
                emailDisplay.textContent = email;
                emailStep.classList.add('hidden');
                verificationStep.classList.remove('hidden');
                currentStep = 'verification';
                
                // Focus first OTP input
                codeInputs[0].focus();
            } catch (error) {
                emailError.textContent = 'Error sending verification code. Please try again.';
                emailError.classList.remove('hidden');
                emailInput.classList.add('border-red-500');
            } finally {
                submitEmail.disabled = false;
                spinner.classList.add('hidden');
            }
        });
        
        // Verification form submission
        verificationForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            let code = '';
            codeInputs.forEach(input => {
                code += input.value;
            });
            
            // Simulate verification
            if (code === '123456') { // In a real app, this would be checked against stored verification code
                verificationStep.classList.add('hidden');
                passwordStep.classList.remove('hidden');
                currentStep = 'password';
                newPassword.focus();
            } else {
                codeInputs.forEach(input => {
                    input.classList.add('border-red-500', 'shake');
                });
                codeError.classList.remove('hidden');
                
                setTimeout(() => {
                    codeInputs.forEach(input => {
                        input.classList.remove('shake');
                    });
                }, 500);
            }
        });
        
        // Resend code button
        resendCode.addEventListener('click', () => {
            // Simulate code resend
            codeInputs.forEach(input => {
                input.value = '';
                input.classList.remove('border-red-500');
            });
            codeError.classList.add('hidden');
            codeInputs[0].focus();
            
            // Show loading indicator
            resendCode.innerHTML = 'Sending...';
            setTimeout(() => {
                resendCode.innerHTML = 'Resend code';
            }, 1500);
        });
        
        // Password strength checker
        newPassword.addEventListener('input', (e) => {
            updatePasswordStrength(e.target.value);
        });
        
        // Password form submission
        passwordForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const password = newPassword.value;
            const confirm = confirmPassword.value;
            
            // Reset errors
            passwordError.classList.add('hidden');
            confirmError.classList.add('hidden');
            newPassword.classList.remove('border-red-500');
            confirmPassword.classList.remove('border-red-500');
            
            let isValid = true;
            
            // Validate password length
            if (password.length < 8) {
                passwordError.textContent = 'Password must be at least 8 characters';
                passwordError.classList.remove('hidden');
                newPassword.classList.add('border-red-500');
                isValid = false;
            }
            
            // Check password match
            if (password !== confirm) {
                confirmError.classList.remove('hidden');
                confirmPassword.classList.add('border-red-500');
                isValid = false;
            }
            
            if (!isValid) return;
            
            // Simulate password reset API call
            passwordStep.classList.add('hidden');
            successStep.classList.remove('hidden');
            currentStep = 'success';
        });
    </script>
</body>
</html>
