<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IBA REAL ESTATE | Find Your Dream Property</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #1e40af;
            --secondary: #1e3a8a;
            --accent: #e11d48;
            --light: #f8fafc;
            --dark: #1e293b;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: var(--dark);
        }
        
        .hero-section {
            background: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url('https://storage.googleapis.com/workspace-0f70711f-8b4e-4d94-86f1-2a93ccde5887/image/c508aef0-e613-4cce-bfc0-4b16690c06f3.png') no-repeat center center;
            background-size: cover;
            height: 90vh;
        }
        
        .property-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .input-highlight:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.2);
        }
        
        .feature-icon {
            width: 80px;
            height: 80px;
            background-color: rgba(30, 64, 175, 0.1);
        }
        
        .testimonial-card {
            background-color: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
        }

        /* Dropdown Styles */
        .dropdown-menu {
            opacity: 0;
            visibility: hidden;
            transform: scale(0.95);
            transition: all 0.2s ease-in-out;
        }
        
        .dropdown-menu.show {
            opacity: 1;
            visibility: visible;
            transform: scale(1);
        }
        
        .dropdown-icon {
            transition: transform 0.2s ease-in-out;
        }
        
        .dropdown-icon.rotated {
            transform: rotate(180deg);
        }
        
        @media (max-width: 768px) {
            .hero-section {
                height: 70vh;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="bg-white shadow-lg sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center"> <!-- Left side: Logo + Nav Links -->
                    <div class="flex-shrink-0 flex items-center">
                        <div class="h-10 w-10 rounded-full bg-blue-700 flex items-center justify-center text-white font-bold text-xl">IB</div>
                        <span class="ml-2 text-xl font-semibold text-blue-800">IBA REAL ESTATE</span>
                    </div>
                    <div class="hidden sm:ml-6 sm:flex sm:space-x-8 ml-6"> <!-- Nav Links + Dropdown -->
                        <a href="/" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">Home</a>
                        <a href="#properties" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">Properties</a>
                        <a href="#agents" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">Agents</a>
                        <a href="#about" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">About</a>
                        <a href="#contact" class="border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">Contact</a>
                        
                        <!-- Professional Service Dropdown -->
                        <div class="admin-dropdown relative inline-block">
                            <button id="service-toggle" class="dropdown-toggle flex items-center px-1 pt-1 border-b-2 border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200" aria-expanded="false" aria-controls="service-menu">
                                <i class="fas fa-tools text-base mr-1" aria-hidden="true"></i>Services
                                <i class="fas fa-chevron-down dropdown-icon text-sm ml-1"></i>
                            </button>
                            <div class="dropdown-menu absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg py-1 z-50" id="service-menu" role="menu" aria-labelledby="service-toggle">
                                <!--<a href="costumer-sell-page.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex items-center transition duration-150" role="menuitem" tabindex="-1" aria-label="Sell Properties">
                                    <i class="fas fa-tag text-base mr-3" aria-hidden="true"></i>Sell
                                </a>-->
                                <a href="/customer-buy-page.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex items-center transition duration-150" role="menuitem" tabindex="-1" aria-label="Buy Properties">
                                    <i class="fas fa-shopping-cart text-base mr-3" aria-hidden="true"></i>Buy
                                </a>
                                <a href="/customer-rent-page.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex items-center transition duration-150" role="menuitem" tabindex="-1" aria-label="Rent Properties">
                                    <i class="fas fa-key text-base mr-3" aria-hidden="true"></i>Rent
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Right side: Login Button (Desktop) -->
                <div class="hidden sm:flex sm:items-center">
                     <a href="login"><button class="bg-blue-700 hover:bg-blue-800 px-4 py-2 rounded-md text-white font-medium transition duration-300">Login / Register</button></a>
                </div>
                
                <!-- Mobile Menu Button -->
                <div class="-mr-2 flex items-center sm:hidden">
                    <button type="button" id="mobile-menu-button" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500">
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Mobile menu, show/hide based on menu state. -->
        <div class="sm:hidden hidden" id="mobile-menu">
            <div class="pt-2 pb-3 space-y-1">
                <a href="index.html" class="bg-gray-50 border-blue-500 text-blue-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium">Home</a>
                <a href="#properties" class="border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium">Properties</a>
                <a href="#agents" class="border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium">Agents</a>
                <a href="#about" class="border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium">About</a>
                <a href="#contact" class="border-transparent text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium">Contact</a>
                
                <!-- Mobile Services Section (Simple List) -->
                <div class="border-l-4 border-transparent text-gray-500 hover:bg-gray-50 pl-3 pr-4 py-2">
                    <details class="text-base font-medium">
                        <summary class="cursor-pointer flex items-center justify-between">
                            <span>Services</span>
                            <i class="fas fa-chevron-down text-sm"></i>
                        </summary>
                        <ul class="mt-2 ml-4 space-y-1 text-sm">
                            <!--<li><a href="sell-page.html" class="block text-gray-600 hover:text-blue-700 py-1">Sell</a></li>-->
                            <li><a href="buy-page.html" class="block text-gray-600 hover:text-blue-700 py-1">Buy</a></li>
                            <li><a href="rent-page.html" class="block text-gray-600 hover:text-blue-700 py-1">Rent</a></li>
                        </ul>
                    </details>
                </div>
                
                
                <div class="mt-4 px-4">
               <a href="login"><button class="bg-blue-700 hover:bg-blue-800 px-4 py-2 rounded-md text-white font-medium transition duration-300">Login / Register</button></a>
                </div>
            </div>
        </div>
    </nav>

  <main class="max-w-7xl mx-auto p-6">
    <h1 class="text-3xl font-bold" style="padding: 20px;">Image:</h1>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
      
      <!-- Left: Image Gallery -->
      <section>
  <div class="border rounded-lg overflow-hidden">
    <img id="mainImage" src="<%= property.image_data%>" alt="<%= property.title %>" class="w-full h-[400px] object-cover" />
  </div>

<h1  class="text-3xl font-bold" style="padding: 20px;">video:</h1>
     <video controls style="max-width: 100%; border-radius: 8px; margin-bottom: 10px; padding-top: 10px;">
      
        <source src="<%= property.video %>" type="video/mp4" />
        Your browser does not support the video tag.
      </video>
  <!--<div class="mt-4 flex space-x-3 overflow-x-auto thumbs">
    <% property.image_data.forEach((img, idx) => { %>
      <img 
        src="<%= img %>" 
        alt="Thumbnail <%= idx + 1 %>" 
        class="w-20 h-20 object-cover rounded cursor-pointer border-2 border-transparent hover:border-blue-700 transition"
        onclick="document.getElementById('mainImage').src = this.src"
        loading="lazy"
      />
    <% }) %>
  </div>-->
</section>

      <!-- Right: Property Details -->
      <section class="space-y-6">
        <h1 class="text-3xl font-bold"><%= property.title %></h1>
        <p class="text-blue-700 font-semibold text-xl">₦<%= property.amount.toLocaleString() %></p>
        <p class="text-gray-600"><i class="fas fa-map-marker-alt mr-2 text-blue-700"></i><%= property.propertyAddress %></p>

        <div class="flex space-x-6 text-gray-700">
          <div class="flex items-center space-x-2">
            <i class="fas fa-bed text-blue-700"></i>
            <span><%= property.bedrooms %> Bedrooms</span>
          </div>
          <div class="flex items-center space-x-2">
            <i class="fas fa-bath text-blue-700"></i>
            <span><%= property.bathrooms %> Bathrooms</span>
          </div>
          <div class="flex items-center space-x-2">
            <i class="fas fa-ruler-combined text-blue-700"></i>
            <span><%= property.sqft %> sqft</span>
          </div>
          <div class="flex items-center space-x-2">
            <i class="fas fa-tag text-blue-700"></i>
            <span><%= property.rentSell  %></span>
          </div>
        </div>

        <div>
          <h2 class="text-xl font-semibold mb-2">Description</h2>
          <p class="text-gray-700 whitespace-pre-line"><%= property.description %></p>
        </div>

        <div class="border-t pt-6">
          <h2 class="text-xl font-semibold mb-4">Contact Agent</h2>
          <form id="contact-agent-form" class="space-y-4 max-w-md" method="post" action="detail-contact">
            <input type="text" name="name" placeholder="Your Name" required class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-700" />
            <input type="email" name="email" placeholder="Your Email" required class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-700" />
            <input type="tel" name="phone" placeholder="Your Phone Number" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-700" />
            <textarea name="message" rows="4" placeholder="Your Message" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-700">I am interested in <%= property.title %>. Please contact me.</textarea>
            <button type="submit" class="bg-blue-700 text-white px-6 py-3 rounded-md hover:bg-blue-800 transition">Send Message</button>
          </form>
          <p id="form-status" class="mt-2 text-green-600 hidden">Message sent successfully!</p>
        </div>
      </section>
    </div>
  </main>

  <footer class="bg-white border-t mt-20 py-6 text-center text-gray-500 text-sm">
    &copy; 2025 IBA REAL ESTATE. All rights reserved.
  </footer>

<script>
        // Mobile menu toggle
        document.getElementById('mobile-menu-button').addEventListener('click', function() {
            const menu = document.getElementById('mobile-menu');
            menu.classList.toggle('hidden');
        });

        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                
                
                const targetId = this.getAttribute('href');
                if(targetId === '#') return;
                
                const targetElement = document.querySelector(targetId);
                if(targetElement) {
                    window.scrollTo({
                        top: targetElement.offsetTop - 80,
                        behavior: 'smooth'
                    });
                    
                    // Close mobile menu if open
                    const mobileMenu = document.getElementById('mobile-menu');
                    mobileMenu.classList.add('hidden');
                }
            });
        });

        // Property filter functionality
        const filterTabs = document.querySelectorAll('.filter-tab');
        const propertyCards = document.querySelectorAll('.property-card');
        const propertyGrid = document.getElementById('property-grid');

        filterTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs
                filterTabs.forEach(t => t.classList.remove('active'));
                // Add active class to clicked tab
                this.classList.add('active');

                const filterType = this.getAttribute('data-filter');

                // Show/hide properties based on filter
                propertyCards.forEach(card => {
                    const cardType = card.getAttribute('data-type');
                    if (filterType === 'all' || cardType === filterType) {
                        card.style.display = 'block';
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        
                        // Animate in
                        setTimeout(() => {
                            card.style.transition = 'all 0.3s ease';
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 100);
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Update pagination or results count (placeholder)
                updateResultsCount(filterType);
            });
        });

        // Function to update results count (dynamic in real app)
        function updateResultsCount(filterType) {
            let count = 0;
            propertyCards.forEach(card => {
                const cardType = card.getAttribute('data-type');
                if (filterType === 'all' || cardType === filterType) {
                    count++;
                }
            });
            console.log(`Showing ${count} properties for filter: ${filterType}`);
            // In real app, update a UI element like: document.getElementById('results-count').textContent = `${count} properties found`;
        }

        // Search form functionality (basic client-side filter; integrate with backend for full search)
        const searchButton = document.querySelector('button[type="submit"]');
        if (searchButton) {
            searchButton.addEventListener('click', function() {
                
                
                const location = document.getElementById('location').value.toLowerCase();
                const propertyType = document.getElementById('property-type').value.toLowerCase();
                const minPrice = document.getElementById('min-price').value;
                const maxPrice = document.getElementById('max-price').value;

                let visibleCount = 0;

                propertyCards.forEach(card => {
                    const cardLocation = card.querySelector('.property-address') ? card.querySelector('.property-address').textContent.toLowerCase() : '';
                    const cardType = card.getAttribute('data-type');
                    const cardPriceText = card.querySelector('.text-xl').textContent.replace(/[^\d,]/g, '').replace(/,/g, '');
                    const cardPrice = parseInt(cardPriceText) || 0;

                    let matches = true;

                    if (location && !cardLocation.includes(location)) matches = false;
                    if (propertyType && propertyType !== '' && !propertyType.includes(cardType)) matches = false;
                    if (minPrice && minPrice !== '' && cardPrice < parseInt(minPrice.replace(/[^\d]/g, ''))) matches = false;
                    if (maxPrice && maxPrice !== '' && cardPrice > parseInt(maxPrice.replace(/[^\d]/g, ''))) matches = false;

                    if (matches) {
                        card.style.display = 'block';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Scroll to properties section
                document.getElementById('properties').scrollIntoView({ behavior: 'smooth' });

                // Show toast or alert for results
                alert(`${visibleCount} properties match your search criteria. Scroll down to view them.`);
                
                // In real app, redirect to filtered results page or update URL params
            });
        }

        // Pagination functionality (basic; integrate with backend for dynamic pages)
        const prevBtn = document.querySelector('#property-grid ~ .flex button:first-child');
        const nextBtn = document.querySelector('#property-grid ~ .flex button:last-child');
        let currentPage = 1;
        const totalPages = 5; // Placeholder

        if (prevBtn && nextBtn) {
            prevBtn.addEventListener('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    loadPage(currentPage);
                    this.disabled = currentPage === 1;
                    nextBtn.disabled = false;
                }
            });

            nextBtn.addEventListener('click', function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    loadPage(currentPage);
                    this.disabled = currentPage === totalPages;
                    prevBtn.disabled = false;
                }
            });
        }

        // Placeholder for loading page (in real app, fetch from API)
        function loadPage(page) {
            console.log(`Loading page ${page}`);
            // Update page indicator
            document.querySelector('#property-grid ~ .flex span').textContent = `Page ${page} of ${totalPages}`;
            // Animate or reload properties for that page
        }

        // Initialize: Set initial results count
        updateResultsCount('all');

        // Lazy loading for images (enhance performance)
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src || img.src;
                        img.classList.remove('lazy');
                        observer.unobserve(img);
                    }
                });
            });

            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        }

        
        // Services Dropdown Toggle Functionality
        (function() {
            const serviceToggle = document.getElementById('service-toggle');
            const serviceMenu = document.getElementById('service-menu');
            const dropdownIcon = serviceToggle.querySelector('.dropdown-icon');

    if (serviceToggle && serviceMenu) {
        // Toggle dropdown on button click
        serviceToggle.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent event bubbling to document click handler
            const isExpanded = this.getAttribute('aria-expanded') === 'true';
            
            // Update ARIA attribute
            this.setAttribute('aria-expanded', !isExpanded);
            
            // Toggle menu visibility
            serviceMenu.classList.toggle('show');
            
            // Rotate icon
            if (dropdownIcon) {
                dropdownIcon.classList.toggle('rotated');
            }
        });

        // Close dropdown when clicking on a menu item (optional: for better UX)
        const menuItems = serviceMenu.querySelectorAll('[role="menuitem"]');
        menuItems.forEach(item => {
            item.addEventListener('click', function() {
                serviceToggle.setAttribute('aria-expanded', 'false');
                serviceMenu.classList.remove('show');
                if (dropdownIcon) {
                    dropdownIcon.classList.remove('rotated');
                }
            });
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function(e) {
            if (!serviceToggle.contains(e.target) && !serviceMenu.contains(e.target)) {
                serviceToggle.setAttribute('aria-expanded', 'false');
                serviceMenu.classList.remove('show');
                if (dropdownIcon) {
                    dropdownIcon.classList.remove('rotated');
                }
            }
        });

        // Keyboard navigation support (close on Escape key)
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && serviceMenu.classList.contains('show')) {
                serviceToggle.setAttribute('aria-expanded', 'false');
                serviceMenu.classList.remove('show');
                if (dropdownIcon) {
                    dropdownIcon.classList.remove('rotated');
                }
                serviceToggle.focus(); // Return focus to toggle button
            }
        });

        // Focus management: Close if focus leaves the dropdown
        serviceMenu.addEventListener('focusout', function(e) {
            if (!serviceToggle.contains(e.relatedTarget) && !serviceMenu.contains(e.relatedTarget)) {
                setTimeout(() => {
                    if (!serviceMenu.contains(document.activeElement)) {
                        serviceToggle.setAttribute('aria-expanded', 'false');
                        serviceMenu.classList.remove('show');
                        if (dropdownIcon) {
                            dropdownIcon.classList.remove('rotated');
                        }
                    }
                }, 100);
            }
        });
    }
})();


document.addEventListener('DOMContentLoaded', () => {
  const loginButton = document.querySelector('a[href="login"] button');
  
  // Check login status from server
  fetch('/api/check-login')
    .then(res => res.json())
    .then(data => {
      if (data.loggedIn) {
        // Remove login button if logged in
        if (loginButton) {
          loginButton.remove();
        }
      }
    });

  // Add event listener to all buttons that require login
  // For demo, let's say all buttons with class 'requires-login' need login
  document.querySelectorAll('button.requires-login').forEach(button => {
    button.addEventListener('click', () => {
   
      fetch('/api/check-login')
        .then(res => res.json())
        .then(data => {
          if (!data.loggedIn) {
            // Redirect to login page if not logged in
            window.location.href = '/login.html';
          } else {
            // Proceed with button action or form submission
            // For demo, just alert or you can trigger the original action
            alert('You are logged in, action allowed.');
          }
        });
    });
  });
});
      
document.getElementById('contact-form').addEventListener('submit', async function(e) {
   
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    try {
        const response = await fetch('/contact', { // Adjust endpoint if needed
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('Message sent successfully!'); // Or show a success message/div
            this.reset(); // Clear form
        } else {
            alert(result.error || 'Something went wrong.'); // Or show error message
        }
    } catch (error) {
        console.error('Submission error:', error);
        alert('Network error. Please try again.');
    }
});
    </script>
</body>
</html>